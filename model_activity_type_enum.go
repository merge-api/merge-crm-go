/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"fmt"
)

// ActivityTypeEnum * `CALL` - CALL * `MEETING` - MEETING * `EMAIL` - EMAIL
type ActivityTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of ActivityTypeEnum
const (
    ACTIVITYTYPEENUM_MERGE_NONSTANDARD_VALUE ActivityTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	ACTIVITYTYPEENUM_CALL ActivityTypeEnum = "CALL"
	ACTIVITYTYPEENUM_MEETING ActivityTypeEnum = "MEETING"
	ACTIVITYTYPEENUM_EMAIL ActivityTypeEnum = "EMAIL"
)

var allowedActivityTypeEnumEnumValues = []ActivityTypeEnum{
	"CALL",
	"MEETING",
	"EMAIL",
}

func (v *ActivityTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityTypeEnum(value)
	for _, existing := range allowedActivityTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ACTIVITYTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewActivityTypeEnumFromValue returns a pointer to a valid ActivityTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityTypeEnumFromValue(v string) (*ActivityTypeEnum, error) {
	ev := ActivityTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := ACTIVITYTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityTypeEnum) IsValid() bool {
	for _, existing := range allowedActivityTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActivityTypeEnum value
func (v ActivityTypeEnum) Ptr() *ActivityTypeEnum {
	return &v
}

type NullableActivityTypeEnum struct {
	value *ActivityTypeEnum
	isSet bool
}

func (v NullableActivityTypeEnum) Get() *ActivityTypeEnum {
	return v.value
}

func (v *NullableActivityTypeEnum) Set(val *ActivityTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityTypeEnum(val *ActivityTypeEnum) *NullableActivityTypeEnum {
	return &NullableActivityTypeEnum{value: val, isSet: true}
}

func (v NullableActivityTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

