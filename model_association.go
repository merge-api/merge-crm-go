/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"time"
)

// Association # The Association Object ### Description The `Association` record refers to an instance of an Association Type. ### Usage Example TODO
type Association struct {
	SourceObject map[string]interface{} `json:"source_object,omitempty"`
	TargetObject map[string]interface{} `json:"target_object,omitempty"`
	AssociationType NullableString `json:"association_type,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewAssociation instantiates a new Association object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociation() *Association {
	this := Association{}
	return &this
}

// NewAssociationWithDefaults instantiates a new Association object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationWithDefaults() *Association {
	this := Association{}
	return &this
}

// GetSourceObject returns the SourceObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Association) GetSourceObject() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceObject
}

// GetSourceObjectOk returns a tuple with the SourceObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Association) GetSourceObjectOk() (*map[string]interface{}, bool) {
	if o == nil || o.SourceObject == nil {
		return nil, false
	}
	return &o.SourceObject, true
}

// HasSourceObject returns a boolean if a field has been set.
func (o *Association) HasSourceObject() bool {
	if o != nil && o.SourceObject != nil {
		return true
	}

	return false
}

// SetSourceObject gets a reference to the given map[string]interface{} and assigns it to the SourceObject field.
func (o *Association) SetSourceObject(v map[string]interface{}) {
	o.SourceObject = v
}

// GetTargetObject returns the TargetObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Association) GetTargetObject() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.TargetObject
}

// GetTargetObjectOk returns a tuple with the TargetObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Association) GetTargetObjectOk() (*map[string]interface{}, bool) {
	if o == nil || o.TargetObject == nil {
		return nil, false
	}
	return &o.TargetObject, true
}

// HasTargetObject returns a boolean if a field has been set.
func (o *Association) HasTargetObject() bool {
	if o != nil && o.TargetObject != nil {
		return true
	}

	return false
}

// SetTargetObject gets a reference to the given map[string]interface{} and assigns it to the TargetObject field.
func (o *Association) SetTargetObject(v map[string]interface{}) {
	o.TargetObject = v
}

// GetAssociationType returns the AssociationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Association) GetAssociationType() string {
	if o == nil || o.AssociationType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssociationType.Get()
}

// GetAssociationTypeOk returns a tuple with the AssociationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Association) GetAssociationTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AssociationType.Get(), o.AssociationType.IsSet()
}

// HasAssociationType returns a boolean if a field has been set.
func (o *Association) HasAssociationType() bool {
	if o != nil && o.AssociationType.IsSet() {
		return true
	}

	return false
}

// SetAssociationType gets a reference to the given NullableString and assigns it to the AssociationType field.
func (o *Association) SetAssociationType(v string) {
	o.AssociationType.Set(&v)
}
// SetAssociationTypeNil sets the value for AssociationType to be an explicit nil
func (o *Association) SetAssociationTypeNil() {
	o.AssociationType.Set(nil)
}

// UnsetAssociationType ensures that no value is present for AssociationType, not even an explicit nil
func (o *Association) UnsetAssociationType() {
	o.AssociationType.Unset()
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Association) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Association) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Association) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *Association) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o Association) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceObject != nil {
		toSerialize["source_object"] = o.SourceObject
	}
	if o.TargetObject != nil {
		toSerialize["target_object"] = o.TargetObject
	}
	if o.AssociationType.IsSet() {
		toSerialize["association_type"] = o.AssociationType.Get()
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

func (v *Association) UnmarshalJSON(src []byte) error {
    type AssociationUnmarshalTarget Association

	var intermediateResult AssociationUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = Association(intermediateResult)
	return nil
}
type NullableAssociation struct {
	value *Association
	isSet bool
}

func (v NullableAssociation) Get() *Association {
	return v.value
}

func (v *NullableAssociation) Set(val *Association) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociation(val *Association) *NullableAssociation {
	return &NullableAssociation{value: val, isSet: true}
}

func (v NullableAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


