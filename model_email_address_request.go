/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
)

// EmailAddressRequest # The EmailAddress Object ### Description The `EmailAddress` object is used to represent an entity's email address. ### Usage Example Fetch from the `GET Contact` endpoint and view their email addresses.
type EmailAddressRequest struct {
	// The email address.
	EmailAddress NullableString `json:"email_address,omitempty"`
	// The email address's type.
	EmailAddressType NullableString `json:"email_address_type,omitempty"`
	IntegrationParams map[string]interface{} `json:"integration_params,omitempty"`
	LinkedAccountParams map[string]interface{} `json:"linked_account_params,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewEmailAddressRequest instantiates a new EmailAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailAddressRequest() *EmailAddressRequest {
	this := EmailAddressRequest{}
	return &this
}

// NewEmailAddressRequestWithDefaults instantiates a new EmailAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailAddressRequestWithDefaults() *EmailAddressRequest {
	this := EmailAddressRequest{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAddressRequest) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAddressRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *EmailAddressRequest) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *EmailAddressRequest) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *EmailAddressRequest) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *EmailAddressRequest) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetEmailAddressType returns the EmailAddressType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAddressRequest) GetEmailAddressType() string {
	if o == nil || o.EmailAddressType.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddressType.Get()
}

// GetEmailAddressTypeOk returns a tuple with the EmailAddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAddressRequest) GetEmailAddressTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddressType.Get(), o.EmailAddressType.IsSet()
}

// HasEmailAddressType returns a boolean if a field has been set.
func (o *EmailAddressRequest) HasEmailAddressType() bool {
	if o != nil && o.EmailAddressType.IsSet() {
		return true
	}

	return false
}

// SetEmailAddressType gets a reference to the given NullableString and assigns it to the EmailAddressType field.
func (o *EmailAddressRequest) SetEmailAddressType(v string) {
	o.EmailAddressType.Set(&v)
}
// SetEmailAddressTypeNil sets the value for EmailAddressType to be an explicit nil
func (o *EmailAddressRequest) SetEmailAddressTypeNil() {
	o.EmailAddressType.Set(nil)
}

// UnsetEmailAddressType ensures that no value is present for EmailAddressType, not even an explicit nil
func (o *EmailAddressRequest) UnsetEmailAddressType() {
	o.EmailAddressType.Unset()
}

// GetIntegrationParams returns the IntegrationParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAddressRequest) GetIntegrationParams() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.IntegrationParams
}

// GetIntegrationParamsOk returns a tuple with the IntegrationParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAddressRequest) GetIntegrationParamsOk() (*map[string]interface{}, bool) {
	if o == nil || o.IntegrationParams == nil {
		return nil, false
	}
	return &o.IntegrationParams, true
}

// HasIntegrationParams returns a boolean if a field has been set.
func (o *EmailAddressRequest) HasIntegrationParams() bool {
	if o != nil && o.IntegrationParams != nil {
		return true
	}

	return false
}

// SetIntegrationParams gets a reference to the given map[string]interface{} and assigns it to the IntegrationParams field.
func (o *EmailAddressRequest) SetIntegrationParams(v map[string]interface{}) {
	o.IntegrationParams = v
}

// GetLinkedAccountParams returns the LinkedAccountParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAddressRequest) GetLinkedAccountParams() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.LinkedAccountParams
}

// GetLinkedAccountParamsOk returns a tuple with the LinkedAccountParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAddressRequest) GetLinkedAccountParamsOk() (*map[string]interface{}, bool) {
	if o == nil || o.LinkedAccountParams == nil {
		return nil, false
	}
	return &o.LinkedAccountParams, true
}

// HasLinkedAccountParams returns a boolean if a field has been set.
func (o *EmailAddressRequest) HasLinkedAccountParams() bool {
	if o != nil && o.LinkedAccountParams != nil {
		return true
	}

	return false
}

// SetLinkedAccountParams gets a reference to the given map[string]interface{} and assigns it to the LinkedAccountParams field.
func (o *EmailAddressRequest) SetLinkedAccountParams(v map[string]interface{}) {
	o.LinkedAccountParams = v
}

func (o EmailAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailAddress.IsSet() {
		toSerialize["email_address"] = o.EmailAddress.Get()
	}
	if o.EmailAddressType.IsSet() {
		toSerialize["email_address_type"] = o.EmailAddressType.Get()
	}
	if o.IntegrationParams != nil {
		toSerialize["integration_params"] = o.IntegrationParams
	}
	if o.LinkedAccountParams != nil {
		toSerialize["linked_account_params"] = o.LinkedAccountParams
	}
	return json.Marshal(toSerialize)
}

func (v *EmailAddressRequest) UnmarshalJSON(src []byte) error {
    type EmailAddressRequestUnmarshalTarget EmailAddressRequest

	var intermediateResult EmailAddressRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = EmailAddressRequest(intermediateResult)
	return nil
}
type NullableEmailAddressRequest struct {
	value *EmailAddressRequest
	isSet bool
}

func (v NullableEmailAddressRequest) Get() *EmailAddressRequest {
	return v.value
}

func (v *NullableEmailAddressRequest) Set(val *EmailAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailAddressRequest(val *EmailAddressRequest) *NullableEmailAddressRequest {
	return &NullableEmailAddressRequest{value: val, isSet: true}
}

func (v NullableEmailAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


