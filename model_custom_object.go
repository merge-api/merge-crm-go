/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"time"
)

// CustomObject # The CustomObject Object ### Description The `Custom Object` record refers to an instance of a Custom Object Class. ### Usage Example TODO
type CustomObject struct {
	ObjectClass NullableString `json:"object_class,omitempty"`
	Fields *map[string]interface{} `json:"fields,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	Id *string `json:"id,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	RemoteFields *[]RemoteField `json:"remote_fields,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewCustomObject instantiates a new CustomObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomObject() *CustomObject {
	this := CustomObject{}
	return &this
}

// NewCustomObjectWithDefaults instantiates a new CustomObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomObjectWithDefaults() *CustomObject {
	this := CustomObject{}
	return &this
}

// GetObjectClass returns the ObjectClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomObject) GetObjectClass() string {
	if o == nil || o.ObjectClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomObject) GetObjectClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// HasObjectClass returns a boolean if a field has been set.
func (o *CustomObject) HasObjectClass() bool {
	if o != nil && o.ObjectClass.IsSet() {
		return true
	}

	return false
}

// SetObjectClass gets a reference to the given NullableString and assigns it to the ObjectClass field.
func (o *CustomObject) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}
// SetObjectClassNil sets the value for ObjectClass to be an explicit nil
func (o *CustomObject) SetObjectClassNil() {
	o.ObjectClass.Set(nil)
}

// UnsetObjectClass ensures that no value is present for ObjectClass, not even an explicit nil
func (o *CustomObject) UnsetObjectClass() {
	o.ObjectClass.Unset()
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *CustomObject) GetFields() map[string]interface{} {
	if o == nil || o.Fields == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObject) GetFieldsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *CustomObject) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]interface{} and assigns it to the Fields field.
func (o *CustomObject) SetFields(v map[string]interface{}) {
	o.Fields = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomObject) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomObject) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *CustomObject) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *CustomObject) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *CustomObject) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *CustomObject) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomObject) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObject) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomObject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomObject) SetId(v string) {
	o.Id = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *CustomObject) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObject) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *CustomObject) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *CustomObject) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetRemoteFields returns the RemoteFields field value if set, zero value otherwise.
func (o *CustomObject) GetRemoteFields() []RemoteField {
	if o == nil || o.RemoteFields == nil {
		var ret []RemoteField
		return ret
	}
	return *o.RemoteFields
}

// GetRemoteFieldsOk returns a tuple with the RemoteFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObject) GetRemoteFieldsOk() (*[]RemoteField, bool) {
	if o == nil || o.RemoteFields == nil {
		return nil, false
	}
	return o.RemoteFields, true
}

// HasRemoteFields returns a boolean if a field has been set.
func (o *CustomObject) HasRemoteFields() bool {
	if o != nil && o.RemoteFields != nil {
		return true
	}

	return false
}

// SetRemoteFields gets a reference to the given []RemoteField and assigns it to the RemoteFields field.
func (o *CustomObject) SetRemoteFields(v []RemoteField) {
	o.RemoteFields = &v
}

func (o CustomObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectClass.IsSet() {
		toSerialize["object_class"] = o.ObjectClass.Get()
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	if o.RemoteFields != nil {
		toSerialize["remote_fields"] = o.RemoteFields
	}
	return json.Marshal(toSerialize)
}

func (v *CustomObject) UnmarshalJSON(src []byte) error {
    type CustomObjectUnmarshalTarget CustomObject

	var intermediateResult CustomObjectUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = CustomObject(intermediateResult)
	return nil
}
type NullableCustomObject struct {
	value *CustomObject
	isSet bool
}

func (v NullableCustomObject) Get() *CustomObject {
	return v.value
}

func (v *NullableCustomObject) Set(val *CustomObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomObject(val *CustomObject) *NullableCustomObject {
	return &NullableCustomObject{value: val, isSet: true}
}

func (v NullableCustomObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


