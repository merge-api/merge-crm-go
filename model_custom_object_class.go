/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"time"
)

// CustomObjectClass # The Custom Object Class Object ### Description The `Custom Object Class` object is used to represent a Custom Object Schema in the remote system. ### Usage Example TODO
type CustomObjectClass struct {
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	Fields *[]RemoteFieldClassForCustomObjectClass `json:"fields,omitempty"`
	AssociationTypes []map[string]interface{} `json:"association_types,omitempty"`
	Id *string `json:"id,omitempty"`
	// The third-party API ID of the matching object.
	RemoteId NullableString `json:"remote_id,omitempty"`
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewCustomObjectClass instantiates a new CustomObjectClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomObjectClass() *CustomObjectClass {
	this := CustomObjectClass{}
	return &this
}

// NewCustomObjectClassWithDefaults instantiates a new CustomObjectClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomObjectClassWithDefaults() *CustomObjectClass {
	this := CustomObjectClass{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomObjectClass) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomObjectClass) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CustomObjectClass) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CustomObjectClass) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CustomObjectClass) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CustomObjectClass) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomObjectClass) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomObjectClass) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomObjectClass) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CustomObjectClass) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CustomObjectClass) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CustomObjectClass) UnsetDescription() {
	o.Description.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CustomObjectClass) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObjectClass) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CustomObjectClass) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CustomObjectClass) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *CustomObjectClass) GetFields() []RemoteFieldClassForCustomObjectClass {
	if o == nil || o.Fields == nil {
		var ret []RemoteFieldClassForCustomObjectClass
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObjectClass) GetFieldsOk() (*[]RemoteFieldClassForCustomObjectClass, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *CustomObjectClass) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []RemoteFieldClassForCustomObjectClass and assigns it to the Fields field.
func (o *CustomObjectClass) SetFields(v []RemoteFieldClassForCustomObjectClass) {
	o.Fields = &v
}

// GetAssociationTypes returns the AssociationTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomObjectClass) GetAssociationTypes() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.AssociationTypes
}

// GetAssociationTypesOk returns a tuple with the AssociationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomObjectClass) GetAssociationTypesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.AssociationTypes == nil {
		return nil, false
	}
	return &o.AssociationTypes, true
}

// HasAssociationTypes returns a boolean if a field has been set.
func (o *CustomObjectClass) HasAssociationTypes() bool {
	if o != nil && o.AssociationTypes != nil {
		return true
	}

	return false
}

// SetAssociationTypes gets a reference to the given []map[string]interface{} and assigns it to the AssociationTypes field.
func (o *CustomObjectClass) SetAssociationTypes(v []map[string]interface{}) {
	o.AssociationTypes = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomObjectClass) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObjectClass) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomObjectClass) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomObjectClass) SetId(v string) {
	o.Id = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomObjectClass) GetRemoteId() string {
	if o == nil || o.RemoteId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteId.Get()
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomObjectClass) GetRemoteIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteId.Get(), o.RemoteId.IsSet()
}

// HasRemoteId returns a boolean if a field has been set.
func (o *CustomObjectClass) HasRemoteId() bool {
	if o != nil && o.RemoteId.IsSet() {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given NullableString and assigns it to the RemoteId field.
func (o *CustomObjectClass) SetRemoteId(v string) {
	o.RemoteId.Set(&v)
}
// SetRemoteIdNil sets the value for RemoteId to be an explicit nil
func (o *CustomObjectClass) SetRemoteIdNil() {
	o.RemoteId.Set(nil)
}

// UnsetRemoteId ensures that no value is present for RemoteId, not even an explicit nil
func (o *CustomObjectClass) UnsetRemoteId() {
	o.RemoteId.Unset()
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *CustomObjectClass) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomObjectClass) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *CustomObjectClass) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *CustomObjectClass) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o CustomObjectClass) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.AssociationTypes != nil {
		toSerialize["association_types"] = o.AssociationTypes
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteId.IsSet() {
		toSerialize["remote_id"] = o.RemoteId.Get()
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

func (v *CustomObjectClass) UnmarshalJSON(src []byte) error {
    type CustomObjectClassUnmarshalTarget CustomObjectClass

	var intermediateResult CustomObjectClassUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = CustomObjectClass(intermediateResult)
	return nil
}
type NullableCustomObjectClass struct {
	value *CustomObjectClass
	isSet bool
}

func (v NullableCustomObjectClass) Get() *CustomObjectClass {
	return v.value
}

func (v *NullableCustomObjectClass) Set(val *CustomObjectClass) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomObjectClass) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomObjectClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomObjectClass(val *CustomObjectClass) *NullableCustomObjectClass {
	return &NullableCustomObjectClass{value: val, isSet: true}
}

func (v NullableCustomObjectClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomObjectClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


