/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// OpportunitiesApiService OpportunitiesApi service
type OpportunitiesApiService service

type ApiOpportunitiesCreateRequest struct {
	ctx _context.Context
	ApiService *OpportunitiesApiService
	xAccountToken *string
	opportunityEndpointRequest *OpportunityEndpointRequest
	isDebugMode *bool
	runAsync *bool
}

func (r ApiOpportunitiesCreateRequest) XAccountToken(xAccountToken string) ApiOpportunitiesCreateRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiOpportunitiesCreateRequest) OpportunityEndpointRequest(opportunityEndpointRequest OpportunityEndpointRequest) ApiOpportunitiesCreateRequest {
	r.opportunityEndpointRequest = &opportunityEndpointRequest
	return r
}
func (r ApiOpportunitiesCreateRequest) IsDebugMode(isDebugMode bool) ApiOpportunitiesCreateRequest {
	r.isDebugMode = &isDebugMode
	return r
}
func (r ApiOpportunitiesCreateRequest) RunAsync(runAsync bool) ApiOpportunitiesCreateRequest {
	r.runAsync = &runAsync
	return r
}

func (r ApiOpportunitiesCreateRequest) Execute() (OpportunityResponse, *_nethttp.Response, error) {
	return r.ApiService.OpportunitiesCreateExecute(r)
}

/*
 * OpportunitiesCreate Method for OpportunitiesCreate
 * Creates an `Opportunity` object with the given values.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiOpportunitiesCreateRequest
 */
func (a *OpportunitiesApiService) OpportunitiesCreate(ctx _context.Context) ApiOpportunitiesCreateRequest {
	return ApiOpportunitiesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return OpportunityResponse
 */
func (a *OpportunitiesApiService) OpportunitiesCreateExecute(r ApiOpportunitiesCreateRequest) (OpportunityResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OpportunityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesApiService.OpportunitiesCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opportunities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}
	if r.opportunityEndpointRequest == nil {
		return localVarReturnValue, nil, reportError("opportunityEndpointRequest is required and must be specified")
	}

	if r.isDebugMode != nil {
		localVarQueryParams.Add("is_debug_mode", parameterToString(*r.isDebugMode, ""))
	}
	if r.runAsync != nil {
		localVarQueryParams.Add("run_async", parameterToString(*r.runAsync, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	// body params
	localVarPostBody = r.opportunityEndpointRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpportunitiesListRequest struct {
	ctx _context.Context
	ApiService *OpportunitiesApiService
	xAccountToken *string
	accountId *string
	createdAfter *time.Time
	createdBefore *time.Time
	cursor *string
	includeDeletedData *bool
	includeRemoteData *bool
	modifiedAfter *time.Time
	modifiedBefore *time.Time
	ownerId *string
	pageSize *int32
	remoteFields *string
	remoteId *string
	stageId *string
	status *string
}

func (r ApiOpportunitiesListRequest) XAccountToken(xAccountToken string) ApiOpportunitiesListRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiOpportunitiesListRequest) AccountId(accountId string) ApiOpportunitiesListRequest {
	r.accountId = &accountId
	return r
}
func (r ApiOpportunitiesListRequest) CreatedAfter(createdAfter time.Time) ApiOpportunitiesListRequest {
	r.createdAfter = &createdAfter
	return r
}
func (r ApiOpportunitiesListRequest) CreatedBefore(createdBefore time.Time) ApiOpportunitiesListRequest {
	r.createdBefore = &createdBefore
	return r
}
func (r ApiOpportunitiesListRequest) Cursor(cursor string) ApiOpportunitiesListRequest {
	r.cursor = &cursor
	return r
}
func (r ApiOpportunitiesListRequest) IncludeDeletedData(includeDeletedData bool) ApiOpportunitiesListRequest {
	r.includeDeletedData = &includeDeletedData
	return r
}
func (r ApiOpportunitiesListRequest) IncludeRemoteData(includeRemoteData bool) ApiOpportunitiesListRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}
func (r ApiOpportunitiesListRequest) ModifiedAfter(modifiedAfter time.Time) ApiOpportunitiesListRequest {
	r.modifiedAfter = &modifiedAfter
	return r
}
func (r ApiOpportunitiesListRequest) ModifiedBefore(modifiedBefore time.Time) ApiOpportunitiesListRequest {
	r.modifiedBefore = &modifiedBefore
	return r
}
func (r ApiOpportunitiesListRequest) OwnerId(ownerId string) ApiOpportunitiesListRequest {
	r.ownerId = &ownerId
	return r
}
func (r ApiOpportunitiesListRequest) PageSize(pageSize int32) ApiOpportunitiesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiOpportunitiesListRequest) RemoteFields(remoteFields string) ApiOpportunitiesListRequest {
	r.remoteFields = &remoteFields
	return r
}
func (r ApiOpportunitiesListRequest) RemoteId(remoteId string) ApiOpportunitiesListRequest {
	r.remoteId = &remoteId
	return r
}
func (r ApiOpportunitiesListRequest) StageId(stageId string) ApiOpportunitiesListRequest {
	r.stageId = &stageId
	return r
}
func (r ApiOpportunitiesListRequest) Status(status string) ApiOpportunitiesListRequest {
	r.status = &status
	return r
}

func (r ApiOpportunitiesListRequest) Execute() (PaginatedOpportunityList, *_nethttp.Response, error) {
	return r.ApiService.OpportunitiesListExecute(r)
}

/*
 * OpportunitiesList Method for OpportunitiesList
 * Returns a list of `Opportunity` objects.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiOpportunitiesListRequest
 */
func (a *OpportunitiesApiService) OpportunitiesList(ctx _context.Context) ApiOpportunitiesListRequest {
	return ApiOpportunitiesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PaginatedOpportunityList
 */
func (a *OpportunitiesApiService) OpportunitiesListExecute(r ApiOpportunitiesListRequest) (PaginatedOpportunityList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedOpportunityList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesApiService.OpportunitiesList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opportunities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.accountId != nil {
		localVarQueryParams.Add("account_id", parameterToString(*r.accountId, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("created_after", parameterToString(*r.createdAfter, ""))
	}
	if r.createdBefore != nil {
		localVarQueryParams.Add("created_before", parameterToString(*r.createdBefore, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.includeDeletedData != nil {
		localVarQueryParams.Add("include_deleted_data", parameterToString(*r.includeDeletedData, ""))
	}
	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	if r.modifiedAfter != nil {
		localVarQueryParams.Add("modified_after", parameterToString(*r.modifiedAfter, ""))
	}
	if r.modifiedBefore != nil {
		localVarQueryParams.Add("modified_before", parameterToString(*r.modifiedBefore, ""))
	}
	if r.ownerId != nil {
		localVarQueryParams.Add("owner_id", parameterToString(*r.ownerId, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.remoteFields != nil {
		localVarQueryParams.Add("remote_fields", parameterToString(*r.remoteFields, ""))
	}
	if r.remoteId != nil {
		localVarQueryParams.Add("remote_id", parameterToString(*r.remoteId, ""))
	}
	if r.stageId != nil {
		localVarQueryParams.Add("stage_id", parameterToString(*r.stageId, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpportunitiesMetaPostRetrieveRequest struct {
	ctx _context.Context
	ApiService *OpportunitiesApiService
	xAccountToken *string
}

func (r ApiOpportunitiesMetaPostRetrieveRequest) XAccountToken(xAccountToken string) ApiOpportunitiesMetaPostRetrieveRequest {
	r.xAccountToken = &xAccountToken
	return r
}

func (r ApiOpportunitiesMetaPostRetrieveRequest) Execute() (MetaResponse, *_nethttp.Response, error) {
	return r.ApiService.OpportunitiesMetaPostRetrieveExecute(r)
}

/*
 * OpportunitiesMetaPostRetrieve Method for OpportunitiesMetaPostRetrieve
 * Returns metadata for `Opportunity` POSTs.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiOpportunitiesMetaPostRetrieveRequest
 */
func (a *OpportunitiesApiService) OpportunitiesMetaPostRetrieve(ctx _context.Context) ApiOpportunitiesMetaPostRetrieveRequest {
	return ApiOpportunitiesMetaPostRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MetaResponse
 */
func (a *OpportunitiesApiService) OpportunitiesMetaPostRetrieveExecute(r ApiOpportunitiesMetaPostRetrieveRequest) (MetaResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MetaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesApiService.OpportunitiesMetaPostRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opportunities/meta/post"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpportunitiesRetrieveRequest struct {
	ctx _context.Context
	ApiService *OpportunitiesApiService
	xAccountToken *string
	id string
	includeRemoteData *bool
	remoteFields *string
}

func (r ApiOpportunitiesRetrieveRequest) XAccountToken(xAccountToken string) ApiOpportunitiesRetrieveRequest {
	r.xAccountToken = &xAccountToken
	return r
}
func (r ApiOpportunitiesRetrieveRequest) IncludeRemoteData(includeRemoteData bool) ApiOpportunitiesRetrieveRequest {
	r.includeRemoteData = &includeRemoteData
	return r
}
func (r ApiOpportunitiesRetrieveRequest) RemoteFields(remoteFields string) ApiOpportunitiesRetrieveRequest {
	r.remoteFields = &remoteFields
	return r
}

func (r ApiOpportunitiesRetrieveRequest) Execute() (Opportunity, *_nethttp.Response, error) {
	return r.ApiService.OpportunitiesRetrieveExecute(r)
}

/*
 * OpportunitiesRetrieve Method for OpportunitiesRetrieve
 * Returns an `Opportunity` object with the given `id`.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiOpportunitiesRetrieveRequest
 */
func (a *OpportunitiesApiService) OpportunitiesRetrieve(ctx _context.Context, id string) ApiOpportunitiesRetrieveRequest {
	return ApiOpportunitiesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return Opportunity
 */
func (a *OpportunitiesApiService) OpportunitiesRetrieveExecute(r ApiOpportunitiesRetrieveRequest) (Opportunity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesApiService.OpportunitiesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/opportunities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAccountToken == nil {
		return localVarReturnValue, nil, reportError("xAccountToken is required and must be specified")
	}

	if r.includeRemoteData != nil {
		localVarQueryParams.Add("include_remote_data", parameterToString(*r.includeRemoteData, ""))
	}
	if r.remoteFields != nil {
		localVarQueryParams.Add("remote_fields", parameterToString(*r.remoteFields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Account-Token"] = parameterToString(*r.xAccountToken, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
