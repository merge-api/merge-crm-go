/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"fmt"
)

// OpportunityStatusEnum * `OPEN` - OPEN * `WON` - WON * `LOST` - LOST
type OpportunityStatusEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of OpportunityStatusEnum
const (
    OPPORTUNITYSTATUSENUM_MERGE_NONSTANDARD_VALUE OpportunityStatusEnum = "MERGE_NONSTANDARD_VALUE"
    
	OPPORTUNITYSTATUSENUM_OPEN OpportunityStatusEnum = "OPEN"
	OPPORTUNITYSTATUSENUM_WON OpportunityStatusEnum = "WON"
	OPPORTUNITYSTATUSENUM_LOST OpportunityStatusEnum = "LOST"
)

var allowedOpportunityStatusEnumEnumValues = []OpportunityStatusEnum{
	"OPEN",
	"WON",
	"LOST",
}

func (v *OpportunityStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpportunityStatusEnum(value)
	for _, existing := range allowedOpportunityStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = OPPORTUNITYSTATUSENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewOpportunityStatusEnumFromValue returns a pointer to a valid OpportunityStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpportunityStatusEnumFromValue(v string) (*OpportunityStatusEnum, error) {
	ev := OpportunityStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := OPPORTUNITYSTATUSENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpportunityStatusEnum) IsValid() bool {
	for _, existing := range allowedOpportunityStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpportunityStatusEnum value
func (v OpportunityStatusEnum) Ptr() *OpportunityStatusEnum {
	return &v
}

type NullableOpportunityStatusEnum struct {
	value *OpportunityStatusEnum
	isSet bool
}

func (v NullableOpportunityStatusEnum) Get() *OpportunityStatusEnum {
	return v.value
}

func (v *NullableOpportunityStatusEnum) Set(val *OpportunityStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityStatusEnum(val *OpportunityStatusEnum) *NullableOpportunityStatusEnum {
	return &NullableOpportunityStatusEnum{value: val, isSet: true}
}

func (v NullableOpportunityStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

