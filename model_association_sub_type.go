/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"time"
)

// AssociationSubType struct for AssociationSubType
type AssociationSubType struct {
	Id NullableString `json:"id,omitempty"`
	OriginType NullableString `json:"origin_type,omitempty"`
	// This is the datetime that this object was last updated by Merge
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewAssociationSubType instantiates a new AssociationSubType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationSubType() *AssociationSubType {
	this := AssociationSubType{}
	return &this
}

// NewAssociationSubTypeWithDefaults instantiates a new AssociationSubType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationSubTypeWithDefaults() *AssociationSubType {
	this := AssociationSubType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssociationSubType) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssociationSubType) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *AssociationSubType) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *AssociationSubType) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *AssociationSubType) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *AssociationSubType) UnsetId() {
	o.Id.Unset()
}

// GetOriginType returns the OriginType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssociationSubType) GetOriginType() string {
	if o == nil || o.OriginType.Get() == nil {
		var ret string
		return ret
	}
	return *o.OriginType.Get()
}

// GetOriginTypeOk returns a tuple with the OriginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssociationSubType) GetOriginTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginType.Get(), o.OriginType.IsSet()
}

// HasOriginType returns a boolean if a field has been set.
func (o *AssociationSubType) HasOriginType() bool {
	if o != nil && o.OriginType.IsSet() {
		return true
	}

	return false
}

// SetOriginType gets a reference to the given NullableString and assigns it to the OriginType field.
func (o *AssociationSubType) SetOriginType(v string) {
	o.OriginType.Set(&v)
}
// SetOriginTypeNil sets the value for OriginType to be an explicit nil
func (o *AssociationSubType) SetOriginTypeNil() {
	o.OriginType.Set(nil)
}

// UnsetOriginType ensures that no value is present for OriginType, not even an explicit nil
func (o *AssociationSubType) UnsetOriginType() {
	o.OriginType.Unset()
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *AssociationSubType) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationSubType) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *AssociationSubType) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *AssociationSubType) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o AssociationSubType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.OriginType.IsSet() {
		toSerialize["origin_type"] = o.OriginType.Get()
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

func (v *AssociationSubType) UnmarshalJSON(src []byte) error {
    type AssociationSubTypeUnmarshalTarget AssociationSubType

	var intermediateResult AssociationSubTypeUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = AssociationSubType(intermediateResult)
	return nil
}
type NullableAssociationSubType struct {
	value *AssociationSubType
	isSet bool
}

func (v NullableAssociationSubType) Get() *AssociationSubType {
	return v.value
}

func (v *NullableAssociationSubType) Set(val *AssociationSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationSubType(val *AssociationSubType) *NullableAssociationSubType {
	return &NullableAssociationSubType{value: val, isSet: true}
}

func (v NullableAssociationSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


