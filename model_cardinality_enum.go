/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"fmt"
)

// CardinalityEnum * `ONE_TO_ONE` - ONE_TO_ONE * `MANY_TO_ONE` - MANY_TO_ONE * `MANY_TO_MANY` - MANY_TO_MANY * `ONE_TO_MANY` - ONE_TO_MANY
type CardinalityEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of CardinalityEnum
const (
    CARDINALITYENUM_MERGE_NONSTANDARD_VALUE CardinalityEnum = "MERGE_NONSTANDARD_VALUE"
    
	CARDINALITYENUM_ONE_TO_ONE CardinalityEnum = "ONE_TO_ONE"
	CARDINALITYENUM_MANY_TO_ONE CardinalityEnum = "MANY_TO_ONE"
	CARDINALITYENUM_MANY_TO_MANY CardinalityEnum = "MANY_TO_MANY"
	CARDINALITYENUM_ONE_TO_MANY CardinalityEnum = "ONE_TO_MANY"
)

var allowedCardinalityEnumEnumValues = []CardinalityEnum{
	"ONE_TO_ONE",
	"MANY_TO_ONE",
	"MANY_TO_MANY",
	"ONE_TO_MANY",
}

func (v *CardinalityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardinalityEnum(value)
	for _, existing := range allowedCardinalityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = CARDINALITYENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewCardinalityEnumFromValue returns a pointer to a valid CardinalityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardinalityEnumFromValue(v string) (*CardinalityEnum, error) {
	ev := CardinalityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := CARDINALITYENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardinalityEnum) IsValid() bool {
	for _, existing := range allowedCardinalityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CardinalityEnum value
func (v CardinalityEnum) Ptr() *CardinalityEnum {
	return &v
}

type NullableCardinalityEnum struct {
	value *CardinalityEnum
	isSet bool
}

func (v NullableCardinalityEnum) Get() *CardinalityEnum {
	return v.value
}

func (v *NullableCardinalityEnum) Set(val *CardinalityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCardinalityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCardinalityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardinalityEnum(val *CardinalityEnum) *NullableCardinalityEnum {
	return &NullableCardinalityEnum{value: val, isSet: true}
}

func (v NullableCardinalityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardinalityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

