/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"fmt"
)

// OriginTypeEnum * `CUSTOM_OBJECT` - CUSTOM_OBJECT * `COMMON_MODEL` - COMMON_MODEL * `REMOTE_ONLY_MODEL` - REMOTE_ONLY_MODEL
type OriginTypeEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of OriginTypeEnum
const (
    ORIGINTYPEENUM_MERGE_NONSTANDARD_VALUE OriginTypeEnum = "MERGE_NONSTANDARD_VALUE"
    
	ORIGINTYPEENUM_CUSTOM_OBJECT OriginTypeEnum = "CUSTOM_OBJECT"
	ORIGINTYPEENUM_COMMON_MODEL OriginTypeEnum = "COMMON_MODEL"
	ORIGINTYPEENUM_REMOTE_ONLY_MODEL OriginTypeEnum = "REMOTE_ONLY_MODEL"
)

var allowedOriginTypeEnumEnumValues = []OriginTypeEnum{
	"CUSTOM_OBJECT",
	"COMMON_MODEL",
	"REMOTE_ONLY_MODEL",
}

func (v *OriginTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OriginTypeEnum(value)
	for _, existing := range allowedOriginTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = ORIGINTYPEENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewOriginTypeEnumFromValue returns a pointer to a valid OriginTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOriginTypeEnumFromValue(v string) (*OriginTypeEnum, error) {
	ev := OriginTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := ORIGINTYPEENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OriginTypeEnum) IsValid() bool {
	for _, existing := range allowedOriginTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OriginTypeEnum value
func (v OriginTypeEnum) Ptr() *OriginTypeEnum {
	return &v
}

type NullableOriginTypeEnum struct {
	value *OriginTypeEnum
	isSet bool
}

func (v NullableOriginTypeEnum) Get() *OriginTypeEnum {
	return v.value
}

func (v *NullableOriginTypeEnum) Set(val *OriginTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginTypeEnum(val *OriginTypeEnum) *NullableOriginTypeEnum {
	return &NullableOriginTypeEnum{value: val, isSet: true}
}

func (v NullableOriginTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

