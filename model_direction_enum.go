/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
	"fmt"
)

// DirectionEnum * `INBOUND` - INBOUND * `OUTBOUND` - OUTBOUND
type DirectionEnum string

// apologies but this is to get around an import error
var _ = fmt.Printf
// List of DirectionEnum
const (
    DIRECTIONENUM_MERGE_NONSTANDARD_VALUE DirectionEnum = "MERGE_NONSTANDARD_VALUE"
    
	DIRECTIONENUM_INBOUND DirectionEnum = "INBOUND"
	DIRECTIONENUM_OUTBOUND DirectionEnum = "OUTBOUND"
)

var allowedDirectionEnumEnumValues = []DirectionEnum{
	"INBOUND",
	"OUTBOUND",
}

func (v *DirectionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DirectionEnum(value)
	for _, existing := range allowedDirectionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}
    *v = DIRECTIONENUM_MERGE_NONSTANDARD_VALUE
    return nil
}

// NewDirectionEnumFromValue returns a pointer to a valid DirectionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectionEnumFromValue(v string) (*DirectionEnum, error) {
	ev := DirectionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
        ev := DIRECTIONENUM_MERGE_NONSTANDARD_VALUE
        return &ev, nil
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DirectionEnum) IsValid() bool {
	for _, existing := range allowedDirectionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DirectionEnum value
func (v DirectionEnum) Ptr() *DirectionEnum {
	return &v
}

type NullableDirectionEnum struct {
	value *DirectionEnum
	isSet bool
}

func (v NullableDirectionEnum) Get() *DirectionEnum {
	return v.value
}

func (v *NullableDirectionEnum) Set(val *DirectionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectionEnum(val *DirectionEnum) *NullableDirectionEnum {
	return &NullableDirectionEnum{value: val, isSet: true}
}

func (v NullableDirectionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

