/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * API version: 1.0
 * Contact: hello@merge.dev
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merge_crm_client

import (
	"encoding/json"
)

// AssociationTypeRequestRequest struct for AssociationTypeRequestRequest
type AssociationTypeRequestRequest struct {
	SourceObjectClass ObjectClassDescriptionRequest `json:"source_object_class"`
	TargetObjectClasses []ObjectClassDescriptionRequest `json:"target_object_classes"`
	RemoteKeyName string `json:"remote_key_name"`
	DisplayName *string `json:"display_name,omitempty"`
	Cardinality *CardinalityEnum `json:"cardinality,omitempty"`
	IsRequired *bool `json:"is_required,omitempty"`
	// raw json response by property name
	ResponseRaw map[string]json.RawMessage `json:"-"`
}

// NewAssociationTypeRequestRequest instantiates a new AssociationTypeRequestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationTypeRequestRequest(sourceObjectClass ObjectClassDescriptionRequest, targetObjectClasses []ObjectClassDescriptionRequest, remoteKeyName string) *AssociationTypeRequestRequest {
	this := AssociationTypeRequestRequest{}
	this.SourceObjectClass = sourceObjectClass
	this.TargetObjectClasses = targetObjectClasses
	this.RemoteKeyName = remoteKeyName
	var isRequired bool = false
	this.IsRequired = &isRequired
	return &this
}

// NewAssociationTypeRequestRequestWithDefaults instantiates a new AssociationTypeRequestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationTypeRequestRequestWithDefaults() *AssociationTypeRequestRequest {
	this := AssociationTypeRequestRequest{}
	var isRequired bool = false
	this.IsRequired = &isRequired
	return &this
}

// GetSourceObjectClass returns the SourceObjectClass field value
func (o *AssociationTypeRequestRequest) GetSourceObjectClass() ObjectClassDescriptionRequest {
	if o == nil {
		var ret ObjectClassDescriptionRequest
		return ret
	}

	return o.SourceObjectClass
}

// GetSourceObjectClassOk returns a tuple with the SourceObjectClass field value
// and a boolean to check if the value has been set.
func (o *AssociationTypeRequestRequest) GetSourceObjectClassOk() (*ObjectClassDescriptionRequest, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceObjectClass, true
}

// SetSourceObjectClass sets field value
func (o *AssociationTypeRequestRequest) SetSourceObjectClass(v ObjectClassDescriptionRequest) {
	o.SourceObjectClass = v
}

// GetTargetObjectClasses returns the TargetObjectClasses field value
func (o *AssociationTypeRequestRequest) GetTargetObjectClasses() []ObjectClassDescriptionRequest {
	if o == nil {
		var ret []ObjectClassDescriptionRequest
		return ret
	}

	return o.TargetObjectClasses
}

// GetTargetObjectClassesOk returns a tuple with the TargetObjectClasses field value
// and a boolean to check if the value has been set.
func (o *AssociationTypeRequestRequest) GetTargetObjectClassesOk() (*[]ObjectClassDescriptionRequest, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetObjectClasses, true
}

// SetTargetObjectClasses sets field value
func (o *AssociationTypeRequestRequest) SetTargetObjectClasses(v []ObjectClassDescriptionRequest) {
	o.TargetObjectClasses = v
}

// GetRemoteKeyName returns the RemoteKeyName field value
func (o *AssociationTypeRequestRequest) GetRemoteKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteKeyName
}

// GetRemoteKeyNameOk returns a tuple with the RemoteKeyName field value
// and a boolean to check if the value has been set.
func (o *AssociationTypeRequestRequest) GetRemoteKeyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RemoteKeyName, true
}

// SetRemoteKeyName sets field value
func (o *AssociationTypeRequestRequest) SetRemoteKeyName(v string) {
	o.RemoteKeyName = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AssociationTypeRequestRequest) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationTypeRequestRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AssociationTypeRequestRequest) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AssociationTypeRequestRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCardinality returns the Cardinality field value if set, zero value otherwise.
func (o *AssociationTypeRequestRequest) GetCardinality() CardinalityEnum {
	if o == nil || o.Cardinality == nil {
		var ret CardinalityEnum
		return ret
	}
	return *o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationTypeRequestRequest) GetCardinalityOk() (*CardinalityEnum, bool) {
	if o == nil || o.Cardinality == nil {
		return nil, false
	}
	return o.Cardinality, true
}

// HasCardinality returns a boolean if a field has been set.
func (o *AssociationTypeRequestRequest) HasCardinality() bool {
	if o != nil && o.Cardinality != nil {
		return true
	}

	return false
}

// SetCardinality gets a reference to the given CardinalityEnum and assigns it to the Cardinality field.
func (o *AssociationTypeRequestRequest) SetCardinality(v CardinalityEnum) {
	o.Cardinality = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *AssociationTypeRequestRequest) GetIsRequired() bool {
	if o == nil || o.IsRequired == nil {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationTypeRequestRequest) GetIsRequiredOk() (*bool, bool) {
	if o == nil || o.IsRequired == nil {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *AssociationTypeRequestRequest) HasIsRequired() bool {
	if o != nil && o.IsRequired != nil {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *AssociationTypeRequestRequest) SetIsRequired(v bool) {
	o.IsRequired = &v
}

func (o AssociationTypeRequestRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source_object_class"] = o.SourceObjectClass
	}
	if true {
		toSerialize["target_object_classes"] = o.TargetObjectClasses
	}
	if true {
		toSerialize["remote_key_name"] = o.RemoteKeyName
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Cardinality != nil {
		toSerialize["cardinality"] = o.Cardinality
	}
	if o.IsRequired != nil {
		toSerialize["is_required"] = o.IsRequired
	}
	return json.Marshal(toSerialize)
}

func (v *AssociationTypeRequestRequest) UnmarshalJSON(src []byte) error {
    type AssociationTypeRequestRequestUnmarshalTarget AssociationTypeRequestRequest

	var intermediateResult AssociationTypeRequestRequestUnmarshalTarget
	var err1 = json.Unmarshal(src, &intermediateResult)
    if err1 != nil {
        return err1
    }
    var err2 = json.Unmarshal(src, &intermediateResult.ResponseRaw)
	if err2 != nil {
		return err2
	}

	*v = AssociationTypeRequestRequest(intermediateResult)
	return nil
}
type NullableAssociationTypeRequestRequest struct {
	value *AssociationTypeRequestRequest
	isSet bool
}

func (v NullableAssociationTypeRequestRequest) Get() *AssociationTypeRequestRequest {
	return v.value
}

func (v *NullableAssociationTypeRequestRequest) Set(val *AssociationTypeRequestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationTypeRequestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationTypeRequestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationTypeRequestRequest(val *AssociationTypeRequestRequest) *NullableAssociationTypeRequestRequest {
	return &NullableAssociationTypeRequestRequest{value: val, isSet: true}
}

func (v NullableAssociationTypeRequestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationTypeRequestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	var err1 = json.Unmarshal(src, &v.value)
    if err1 != nil {
        return err1
    }
    return json.Unmarshal(src, &v.value.ResponseRaw)
}


